/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.deitel.messenger;

import com.deitel.messenger.sockets.SocketMessengerConstants;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author avilapm
 */
public class SwingControlDemo extends javax.swing.JFrame implements CommandListener {

    private int command;
    private Color color = Color.BLACK;
    private String message;
    private boolean critical_area = false;
    private MyMessageListener messageListener;
    private CopyOnWriteArrayList arr = null;
    private boolean isArrayPointReady = false;
    private MessageManager manager; // communicates with server
    private List<Point> listArrayPoint;

    /**
     * Creates new form SwingControlDemo
     *
     * @param manager
     */
    public SwingControlDemo(MessageManager manager) {
        this.command = CanvasConstants.DESENHO_LIVRE;
        messageListener = new SwingControlDemo.MyMessageListener();
        this.manager = manager; // set the MessageManager
        listArrayPoint = new ArrayList<>();
        arr = new CopyOnWriteArrayList<>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btnApagar = new javax.swing.JButton();
        Texto = new javax.swing.JButton();
        btnDesenhar = new javax.swing.JButton();
        jSliderEraser = new javax.swing.JSlider();
        btnColor = new javax.swing.JButton();
        btnEnviar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemConecta = new javax.swing.JMenuItem();
        jMenuItemDesconecta = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        controlPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        controlPanel.setPreferredSize(new java.awt.Dimension(436, 451));
        controlPanel.setLayout(new java.awt.BorderLayout());

        btnApagar.setText("Apagar");
        btnApagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApagarActionPerformed(evt);
            }
        });

        Texto.setText("Texto");
        Texto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextoActionPerformed(evt);
            }
        });

        btnDesenhar.setText("Desenhar");
        btnDesenhar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesenharActionPerformed(evt);
            }
        });

        jSliderEraser.setMinimum(10);
        jSliderEraser.setSnapToTicks(true);
        jSliderEraser.setValue(10);

        btnColor.setText("Cor");
        btnColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColorActionPerformed(evt);
            }
        });

        btnEnviar.setText("Enviar");
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnDesenhar, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Texto, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnColor, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnApagar, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnEnviar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSliderEraser, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSliderEraser, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDesenhar)
                            .addComponent(Texto)
                            .addComponent(btnColor)
                            .addComponent(btnApagar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEnviar))))
        );

        jMenu1.setText("File");

        jMenuItemConecta.setText("Conectar");
        jMenuItemConecta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemConectaActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemConecta);

        jMenuItemDesconecta.setText("Desconectar");
        jMenu1.add(jMenuItemDesconecta);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        controlPanel.add(new MyCanvas(this,manager),BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDesenharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesenharActionPerformed
        // TODO add your handling code here:
        command = CanvasConstants.DESENHO_LIVRE;
    }//GEN-LAST:event_btnDesenharActionPerformed

    private void btnApagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApagarActionPerformed
        // TODO add your handling code here:
        command = CanvasConstants.APAGAR;
    }//GEN-LAST:event_btnApagarActionPerformed

    private void btnColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColorActionPerformed
        // TODO add your handling code here:

        color = JColorChooser.showDialog(null, "Selecione a Cor", Color.black);
        btnColor.setBackground(color);
    }//GEN-LAST:event_btnColorActionPerformed

    private void TextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextoActionPerformed
        command = CanvasConstants.ESCREVER;
        message = JOptionPane.showInputDialog("Digite seu texto", DISPOSE_ON_CLOSE);
        System.out.println(message);
    }//GEN-LAST:event_TextoActionPerformed

    private void jMenuItemConectaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemConectaActionPerformed
        // TODO add your handling code here:
        // connect to server and route messages to messageListener
        manager.connect(messageListener);

        // prompt for userName
        String userName = JOptionPane.showInputDialog(
                SwingControlDemo.this, "Enter user name:");

        setTitle(userName);

    }//GEN-LAST:event_jMenuItemConectaActionPerformed

    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        ExecutorService executor = Executors.newFixedThreadPool(1);
        executor.submit(new Runnable() {
            @Override
            public void run() {
                sendMessage();
            }
        });

        executor.shutdown();


    }//GEN-LAST:event_btnEnviarActionPerformed

    private synchronized void sendMessage() {
        // TODO add your handling code here:
        String message = "";

        //transmite para o server
        Point temp[] = new Point[100000];
        listArrayPoint.toArray(temp);

        for (int i = 0; i < listArrayPoint.size() - 1; i++) {

            message += temp[i].x + CanvasConstants.POINT_SEPARATOR + temp[i].y + CanvasConstants.POINT_SEPARATOR;
        }

        int cor = color.getRGB();

        if (message.length() > 0) {
            message = message.substring(0, message.length() - 1);
            message = message + SocketMessengerConstants.MESSAGE_SEPARATOR + cor;
        }

        //inserir um separador MESSAGE_SEPARATORs
        //inserir a cor
        //pra mandar pro servidor a cor, temos que transformar pra string, usnado color.getRGB();
        //concatenar a cor na mensagem.
      
        System.out.println("message " + message);
        if (listArrayPoint.size() - 1 > 0) {
            manager.sendMessage(String.valueOf(command),
                    message);
        }

        listArrayPoint.clear();
        System.out.println("sendMessage : " + message);
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Texto;
    private javax.swing.JButton btnApagar;
    private javax.swing.JButton btnColor;
    private javax.swing.JButton btnDesenhar;
    private javax.swing.JButton btnEnviar;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemConecta;
    private javax.swing.JMenuItem jMenuItemDesconecta;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider jSliderEraser;
    // End of variables declaration//GEN-END:variables

    @Override
    public int getCommand() {
        return command;
    }

    @Override
    public int getSizeEraser() {
        return jSliderEraser.getValue();
    }

    @Override
    public Color getColor() {
        return color;
    }

    @Override
    public String getMessage() {
        return message;
    }

    @Override
    public List<Point> getArrayPoint() {
        return arr;
    }

    @Override
    public boolean getArrayPointIsReady() {
        return isArrayPointReady;
    }

    @Override
    public void setArrayPoint(List<Point> list) {

        ArrayList<Point> temp = new ArrayList(list);

        temp.forEach((p) -> {
            listArrayPoint.add(p);
        });

        System.out.println("listArrayPoint size: " + listArrayPoint.size());

    }

    @Override
    public void setClearArrayPoint() {
        arr.clear();
    }

    // MyMessageListener listens for new messages from MessageManager and 
    // displays messages in messageArea using MessageDisplayer.
    private class MyMessageListener implements MessageListener {
        // when received, display new messages in messageArea

        @Override
        public void messageReceived(String from, String message) {
            ExecutorService clientExecutor = Executors.newCachedThreadPool();
            System.out.println("messageReceived from server: " + message);
            clientExecutor.submit(() -> {
                new SwingControlDemo.MessageDisplayer(from, message);
            });

            clientExecutor.shutdown();

        } // end method messageReceived
    } // end MyMessageListener inner class

    // Displays new message by appending message to JTextArea.  Should
    // be executed only in Event thread; modifies live Swing component
    private class MessageDisplayer {

        private int elements; // user from which message came
        private String messageBody; // body of message
        private int i;

        int posCount = 0;

        // MessageDisplayer constructor
        private MessageDisplayer(String from, String body) {
            ExecutorService clientExecutor = Executors.newCachedThreadPool();
            clientExecutor.submit(() -> {
                displayMessage(from, body);
            });

            clientExecutor.shutdown();

        } // end MessageDisplayer constructor

        private synchronized void displayMessage(String from, String body) {

            isArrayPointReady = false;
            ExecutorService executor = Executors.newFixedThreadPool(1);

            Future<Boolean> future = (Future<Boolean>) executor.submit(() -> {
                int comando = Integer.valueOf(from); // store originating user
                messageBody = body; // store message body

                String split1[] = messageBody.split(SocketMessengerConstants.MESSAGE_SEPARATOR);

                arr.clear();
                System.out.println("Array clear: " + arr.size());

                String points[] = split1[0].split(CanvasConstants.POINT_SEPARATOR);
                System.out.println("Number of points: " + points.length);
                for (i = 0; i < points.length; i += 2) {
                    System.out.println("For >>>" + points[i] + " " + points[i + 1]);
                    arr.add(new Point(Integer.valueOf(points[i]), Integer.valueOf(points[i + 1])));
                }

                command = comando;
                int RGB = Integer.parseInt(split1[1]);
                color = new Color(RGB);

                return true;
            });

            try {

                isArrayPointReady = future.get();
                executor.shutdown();

                System.out.println("Size array return by future call: " + arr.size());

                //notify painel
                for (Component c : controlPanel.getComponents()) {
                    if (c instanceof JPanel) {
                        JPanel temp = (JPanel) c;
                        System.out.println("Notifica JPANEL: " + temp.getName());
                        temp.repaint();
                    }

                }

            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(SwingControlDemo.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    } // end MessageDisplayer inner class
}
